traincutoff=dim(data)[1]-testsetlength
teststart = traincutoff+1
trainset = data[FALSE,]
testset = data[FALSE,]
trainset=data[1:traincutoff,]
testset=data[teststart:dim(data)[1],]
#
# for (i in 1:traincutoff) {
#   trainset[i,] = data[i,]}
#
# for (i in teststart:dim(data)[1]){
#   testset[i,]=data[i,]}
#
# testset=testset[!is.na(testset$AQI),]
#I run a regression on the training data set.
lineartrainMod <- lm(AQI ~ ., data=trainset)
# The results show a lot of automatically dropped variables due to singularity (meaning the matrix is not invertible when they are
#   left in due to extreme multicollinearity)
# Dropping the agreed upon variables (from 4/11 meeting) but keeping DoW to see if it does anything.
keeps <- c("Month","AQI", "DoW", "MetroRidership", "Con_AllPermits",
"NaturalGas_Use",
"MetricTonsCO2",
"SqFt_GreenRoof",
"PRCP",
"TMAX",
"Wind Arithmetic Mean",
"Wind 1st Max Hour",
"SNWD")
liltrain = trainset[keeps]
liltrainMod <- lm(AQI ~ ., data=liltrain)  # build linear regression model on full data
#Now dropping the day of the week variable for comparison.
drop <- c("DoW")
tinytrain=liltrain[,!(names(liltrain) %in% drop)]
tinytrainMod <- lm(AQI ~ ., data=tinytrain)  # build linear regression model on full data
install.packages("corrplot")
install.packages("corrplot")
x
x <- c(1, 3, 2, 5)
x
?c
ls()
del_list = setdiff(ls(), "x"))
del_list = setdiff(ls(), "x")
del_list
del_list = setdiff(ls(), "x")
del_list
rm(del_list)
ls()
del_list = setdiff(ls(), "x")
del_list = setdiff(ls(), "x")
del_list
for (ind in 1:len(del_list))
{
rm(del_list[ind])
}
dim(del_list)
length(del_list)
for (ind in 1:length(del_list))
{
rm(del_list[ind])
}
del_list[1]
rm(del_list[1])
rm(list=setdiff(ls(), "x"))
x=rnorm(50)
y = x + rnorm(50, mean = 50, sd = .1)
cor(x,y)
corr(x,y)
q()
knitr::opts_chunk$set(echo = TRUE)
letters_in_Fionas_name = list('F', 'i', 'o', 'n', 'a')
print(letters_in_Fionas_name)
length(letters_in_Fionas_name)
for letter in letters_in_Fionas_name) {
for (letter in letters_in_Fionas_name) {
new_name = paste0(new_name, letter)
print(new_name)
}
new_name = []
for (letter in letters_in_Fionas_name) {
#new_name = paste0(new_name, letter)
#print(new_name)
print(letter)
}
#print(letter)
}
for (letter in letters_in_Fionas_name) {
new_name = cbind(new_name, letter)
print(new_name)
}
new_name = ''
for (letter in letters_in_Fionas_name) {
new_name = cbind(new_name, letter)
print(new_name)
}    #print(letter)
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(new_name, letters_in_Fionas_name[i])
print(new_name)
}    #print(letter)
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(new_name, letters_in_Fionas_name[i])
print(new_name)
}
new_name = ''
new_name = ''
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(new_name, letters_in_Fionas_name[i])
print(new_name)
}
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(letters_in_Fionas_name[i])
print(new_name)
}
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(new_name, letters_in_Fionas_name[i])
print(new_name)
}
new_name
rm(new_name)
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(new_name, letters_in_Fionas_name[i])
print(new_name)
}
new_name = character(0)
new_name = character(0)
for (i in 1:length(letters_in_Fionas_name)) {
new_name = cbind(new_name, letters_in_Fionas_name[i])
print(new_name)
}
new_name
print(new_name)
knitr::opts_chunk$set(echo = TRUE)
letters_in_Fionas_name = list('F', 'i', 'o', 'n', 'a')
print(new_name)
print(letters_in_Fionas_name)
print(new_name)
X = matrix(c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrow=6)
X
X = matrix(c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrow=6, byrow=TRUE)
X
Y = c("Red", "Red", "Red", "Green", "Green", "Red")
Y
t(Y)
dim(X)
dim(X)[1]
for i in 1:dim(X)[1]:
print(i)
for (i in 1:dim(X)[1]){
print(i)
}
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]){
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else {print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))}
}
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]){
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else {
print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))}
}
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]){
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else {
print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))
}
}
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]){
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else {
print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))
}
}
print(i)
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]){
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))
}
print(i)
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]){
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))
}
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]) {
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = " dim(x)[2], ", but numcol y = ", dim(y)[2]))
}
Euclidean_Distance <- function(x, y){
if(dim(y)[2]==dim(x)[2]) {
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", dim(y)[2]))
}
y = c(0,0,0)
dim(y)
length(y)
y[2]
Euclidean_Distance <- function(x, y){
if(length(y)[2]==dim(x)[2]) {
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
y2 = c(0,0)
Euclidean_Distance(X, y2)
Euclidean_Distance <- function(x, y){
if(length(y)==dim(x)[2]) {
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance(X, y2)
Euclidean_Distance(X, y)
X[1]
X[1, ]
Euclidean_Distance(X[1, ], y)
Euclidean_Distance(X[1, 1:3], y)
z = X[1, ]
dim(z)
length(z)
col(X)
X
vector(0)
vector(c(1,2,3))
rep(0, dim(X)[1])
w = rep(0, dim(X)[1])
length(w)
Euclidean_Distance <- function(x, y){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance(X, y)
Euclidean_Distance <- function(x, y = rep(0, dim(x)[1])){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance(X)
Euclidean_Distance <- function(x, y = rep(0, dim(x)[2])){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i][j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance(X)
Euclidean_Distance <- function(x, y = rep(0, dim(x)[2])){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
print((x[i,j]-y[j])^2)
}
}
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance(X)
g = matrix(c(y = rep(0, dim(x)[2]*dim(x)[1])))
x = X
g = matrix(c(y = rep(0, dim(x)[2]*dim(x)[1])))
g
g = matrix(c(y = rep(0, dim(x)[2]*dim(x)[1])), nrow = dim(x)[1])
g
Euclidean_Distance <- function(x, y = rep(0, dim(x)[2])){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
g = matrix(c(y = rep(0, dim(x)[2]*dim(x)[1])), nrow = dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
g[i,j] = (x[i,j]-y[j])^2
}
}
return(g)
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance(X)
l = Euclidean_Distance(X)
l
sum(g)
g
sum(l)
sum(l, byrow)
?sum
Euclidean_Distance <- function(x, y = rep(0, dim(x)[2])){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
g = matrix(c(y = rep(0, dim(x)[2]*dim(x)[1])), nrow = dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
g[i,j] = (x[i,j]-y[j])^2
w[i] = w[i]+[g[i,j]]
}
}
w = sqrt(w)
return(w)
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
Euclidean_Distance <- function(x, y = rep(0, dim(x)[2])){
if(length(y)==dim(x)[2]) {
w = rep(0, dim(x)[1])
g = matrix(c(y = rep(0, dim(x)[2]*dim(x)[1])), nrow = dim(x)[1])
for (i in 1:dim(X)[1]) {
for (j in 1:dim(X)[2]){
g[i,j] = (x[i,j]-y[j])^2
w[i] = w[i]+g[i,j]
}
}
w = sqrt(w)
return(w)
}
else print(paste0("x and y do not conform, numcol x = ", dim(x)[2], ", but numcol y = ", length(y)))
}
m = Euclidean_Distance(X)
m
Y
X = matrix(c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrow=6, byrow=TRUE)
Y = c("Red", "Red", "Red", "Green", "Green", "Red")
source('~/ISLR_Labs/MyWork/Euclidean_Distance.R')
A = matrix(c(10, 10, 10), nrow=1)
Euclidean_Distance(A)
source('~/.active-rstudio-document')
getwd()
current_directory = "C:\Users\Austin\Documents\ISLR_Labs\MyWork"
current_directory = replace("C:\Users\Austin\Documents\ISLR_Labs\MyWork", "\", "/")
x = 'adfadaf'
?replace
replace(x, "a","b")
fp <- readClipboard()
fp <- readClipboard()
setwd(fp)
Euclidean_Distance(A)
source("Euclidean_Distance.R")
Euclidean_Distance(A)
A = matrix(c(10, 10, 10), nrow=1)
A
Euclidean_Distance(A)
Euclidean_Distance(x = A)
source('~/ISLR_Labs/MyWork/Euclidean_Distance.R')
source("Euclidean_Distance.R")
Euclidean_Distance(A)
rnorm(10)
A = matrix(c(rnorm(1000)*10), nrow=1000/50)
Euclidean_Distance(A)
A = matrix(c(rnorm(999)*10), nrow=333)
Euclidean_Distance(A)
X = matrix(c(0,3,0,2,0,0,0,1,3,0,1,2,-1,0,1,1,1,1), nrow=6, byrow=TRUE)
Y = c("Red", "Red", "Red", "Green", "Green", "Red")
Euclidean_Distance(X)
!pwd
!dir()
!dir
getwd()
file.choose
file.choose()
input_filepath = file.choose()
?read.csv2
read.csv(file = input_filepath)
College_data = read.csv(file = input_filepath)
fix(College_data)
college = read.csv(file = input_filepath)
fix(college)
rownames(college)=college[ ,1]
fix(college)
college = college[ , -1]
fix(college)
college[rownames("Harvard")]
college
fix(college)
?subset
H = subset(college, rownames == "Harvard")
fix(college)
H = subset(college, row.names == "Harvard")
?subset
fix(college)
college2 = college
college2['pct_accpt'] = college2$Accept/college2$Apps
college2 = college2[order(-pct_accpt),]
head(college2)
college2$pct_accpt = college2$Accept/college2$Apps
college2 = college2[order(-pct_accpt),]
college2 = college2[order(-college2$pct_accpt),]
head(college2)
college3 = college2[order(college2$pct_accpt),]
head(college3)
my_subset = college2[c("Harvard University", "George Washington University"),
]
my_subset
# c)
## i.  produce a numerical summary
summary(college)
pairs(college)
pairs(college[ , 1:10])
college(order[-college$Grad.Rate])
college(order[, -college$Grad.Rate])
order(college, college$Grad.Rate)
## iii.  Use the plot() function to produce side-by-side boxplots of Outstate versus Private.
plot(college$Outstate ~ college$Private)
?subset
subset(college, Outstate > 20000)
Elite = rep("No", nrow(college))
Elite
Elite[college$Top10perc > 50] = "Yes"
Elite
Elite = as.factor(Elite)
Elite
college = data.frame(college, Elite)
summary(Elite)
subset(college, Elite = "Yes")
college = data.frame(college, Elite)
subset(college, Elite = "Yes")
subset(college, Elite == "Yes")
head(college)
college[ , -c("Elite.1")]
college[ , -c("Elite")]
college[ , -20]
summary(Elite)  # There are 78 elite universities, and 699 that are not elite.
college$Elite.1
college = college[ , -21]
head(college)
dim(college)
head(college[ , 20])
college = college[ , -20]
dim(college)
head(college)
plot(college$Elite ~ college$Outstate)
plot(college$Outstate ~ college$Elite)
hist(college)
hist(college$Top10perc, college$Outstate)
hist(college$Top10perc ~ college$Outstate)
?hist
hist(college$Top10perc)
hist(college$Elite)
hist(college$Outstate)
hist(college$Room.Board)
hist(college$Expend)
par(mfrow = c(2, 2))
hist(college$Top10perc)
hist(college$Outstate)
hist(college$Room.Board)
hist(college$Expend)
